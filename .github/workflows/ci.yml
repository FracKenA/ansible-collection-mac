name: CI
'on':
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: "0 5 * * 0"

defaults:
  run:
    working-directory: ansible_collections/frackena/mac

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3
        with:
          path: ansible_collections/frackena/mac

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install test dependencies.
        run: pip3 install yamllint ansible-core ansible-lint

      - name: Lint code.
        run: |
          yamllint .
          ansible-lint

  integration:
    name: Integration
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: 
          - 'macos-13'
          - 'macos-12'
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v3
        with:
          path: ansible_collections/frackena/mac

      - name: Uninstall GitHub Actions' built-in Homebrew.
        run: tests/uninstall-homebrew.sh

      - name: Uninstall GitHub Actions' built-in browser installs.
        run: |
          sudo rm -rf /Applications/Firefox.app || true
          sudo rm -rf /Applications/Google\ Chrome.app || true

      - name: Install test dependencies.
        run: |
          sudo pip3 install --upgrade pip
          sudo pip3 install ansible-core

      - name: Set up the test environment.
        run: |
          cp tests/ansible.cfg ./ansible.cfg
          cp tests/inventory ./inventory
          ansible-galaxy install -r requirements.yml

      - name: Test the playbook's syntax.
        run: ansible-playbook tests/test.yml --syntax-check

      - name: Test the playbook.
        run: ansible-playbook tests/test.yml
        env:
          ANSIBLE_FORCE_COLOR: '1'

      - name: Idempotence check.
        run: |
          idempotence=$(mktemp)
          ansible-playbook tests/test.yml | tee -a ${idempotence}
          tail ${idempotence} | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)
        env:
          ANSIBLE_FORCE_COLOR: '1'

      - name: Output the current permissions of the /usr/local directory.
        if: failure()
        run: ls -al /usr/local

      - name: Output the current permissions of the /usr directory.
        if: failure()
        run: ls -al /usr
